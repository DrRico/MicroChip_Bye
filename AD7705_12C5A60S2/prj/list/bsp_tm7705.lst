C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 1   


C51 COMPILER V9.57.0.0, COMPILATION OF MODULE BSP_TM7705
OBJECT MODULE PLACED IN .\obj\bsp_tm7705.obj
COMPILER INVOKED BY: D:\KeilC51\C51\BIN\C51.EXE ..\src\bsp\bsp_tm7705.c COMPACT OPTIMIZE(8,SPEED) BROWSE INCDIR(..\src\b
                    -sp) DEBUG OBJECTEXTEND PRINT(.\list\bsp_tm7705.lst) OBJECT(.\obj\bsp_tm7705.obj)

line level    source

   1          /*
   2          *********************************************************************************************************
   3          *
   4          *       Ä£¿éÃû³Æ : TM7705 Çý¶¯Ä£¿é(2Í¨µÀ´øPGAµÄ16Î»ADC)
   5          *       ÎÄ¼þÃû³Æ : bsp_tm7705.c
   6          *       °æ    ±¾ : V1.0
   7          *       Ëµ    Ã÷ : TM7705Ä£¿éºÍCPUÖ®¼ä²ÉÓÃSPI½Ó¿Ú¡£±¾Çý¶¯³ÌÐòÖ§³ÖÈí¼þSPI½Ó¿Ú¡£
   8          *
   9          *       ÐÞ¸Ä¼ÇÂ¼ :
  10          *               °æ±¾ºÅ  ÈÕÆÚ        ×÷Õß     ËµÃ÷
  11          *               V1.0    2013-10-20  armfly  ÕýÊ½·¢²¼
  12          *
  13          *       Copyright (C), 2013-2014, °²¸»À³µç×Ó www.armfly.com
  14          *
  15          *********************************************************************************************************
  16          */
  17          
  18          #include "bsp.h"
  19          
  20          #define SOFT_SPI                /* ¶¨Òå´ËÐÐ±íÊ¾Ê¹ÓÃGPIOÄ£ÄâSPI½Ó¿Ú */
  21          //#define HARD_SPI              /* ¶¨Òå´ËÐÐ±íÊ¾Ê¹ÓÃCPUµÄÓ²¼þSPI½Ó¿Ú */
  22          
  23          /* Í¨µÀ1ºÍÍ¨µÀ2µÄÔöÒæ,ÊäÈë»º³å£¬¼«ÐÔ */
  24          #define __CH1_GAIN_BIPOLAR_BUF  (GAIN_1 | UNIPOLAR | BUF_EN)
  25          #define __CH2_GAIN_BIPOLAR_BUF  (GAIN_1 | UNIPOLAR | BUF_EN)
  26          
  27          /*                                                                              
  28                  ½ÓÏß·½·¨£º STC89C52¿ª·¢°å£¬ÇëÊ¹ÓÃ¶Å°îÏßÁ¬½Ó¡£
  29          
  30              TM7705Ä£¿é   STC89C52¿ª·¢°å
  31                VCC   ------  5.0V (3.3V)
  32                GND   ------  GND
  33                CS    ------  P1.0
  34                RST   ------  P1.1   
  35                DIN   ------  P1.2
  36                      SCK   ------  P1.3
  37                DOUT  ------  P1.4
  38                DRDY  ------  P1.5        
  39          */
  40          
  41          #if !defined(SOFT_SPI) && !defined(HARD_SPI)
                      #error "Please define SPI Interface mode : SOFT_SPI or HARD_SPI"
              #endif
  44          
  45          #ifdef SOFT_SPI         /* Èí¼þSPI */
  46                  /* ¶¨ÒåGPIO¶Ë¿Ú */
  47                  sbit CS     = P1^0;
  48                  sbit RESET  = P1^1;
  49                  sbit DIN    = P1^2;
  50                  sbit SCK    = P1^3;
  51                  sbit DOUT   = P1^4;
  52                  sbit DRDY               = P1^5;
  53          
  54                  /* ¶¨Òå¿ÚÏßÖÃ0ºÍÖÃ1µÄºê */
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 2   

  55                  #define CS_0()          CS = 0
  56                  #define CS_1()          CS = 1
  57          
  58                  #define RESET_0()       RESET = 0
  59                  #define RESET_1()       RESET = 1
  60          
  61                  #define DI_0()          DIN = 0
  62                  #define DI_1()          DIN = 1
  63          
  64                  #define SCK_0()         SCK = 0 
  65                  #define SCK_1()         SCK = 1
  66          
  67                  #define DO_IS_HIGH()    (DOUT != 0)
  68          
  69                  #define DRDY_IS_LOW()   (DRDY == 0)
  70          #endif
  71          
  72          #ifdef HARD_SPI         /* Ó²¼þSPI */
                      #error "Don't surport Hard SPI Interface mode"
              #endif
  75          
  76          /* Í¨ÐÅ¼Ä´æÆ÷bit¶¨Òå */
  77          enum
  78          {
  79                  /* ¼Ä´æÆ÷Ñ¡Ôñ  RS2 RS1 RS0  */
  80                  REG_COMM        = 0x00, /* Í¨ÐÅ¼Ä´æÆ÷ */
  81                  REG_SETUP       = 0x10, /* ÉèÖÃ¼Ä´æÆ÷ */
  82                  REG_CLOCK       = 0x20, /* Ê±ÖÓ¼Ä´æÆ÷ */
  83                  REG_DATA        = 0x30, /* Êý¾Ý¼Ä´æÆ÷ */
  84                  REG_ZERO_CH1    = 0x60, /* CH1 Æ«ÒÆ¼Ä´æÆ÷ */
  85                  REG_FULL_CH1    = 0x70, /* CH1 ÂúÁ¿³Ì¼Ä´æÆ÷ */
  86                  REG_ZERO_CH2    = 0x61, /* CH2 Æ«ÒÆ¼Ä´æÆ÷ */
  87                  REG_FULL_CH2    = 0x71, /* CH2 ÂúÁ¿³Ì¼Ä´æÆ÷ */
  88          
  89                  /* ¶ÁÐ´²Ù×÷ */
  90                  WRITE           = 0x00, /* Ð´²Ù×÷ */
  91                  READ            = 0x08, /* ¶Á²Ù×÷ */
  92          
  93                  /* Í¨µÀ */
  94                  CH_1            = 0,    /* AIN1+  AIN1- */
  95                  CH_2            = 1,    /* AIN2+  AIN2- */
  96                  CH_3            = 2,    /* AIN1-  AIN1- */
  97                  CH_4            = 3             /* AIN1-  AIN2- */
  98          };
  99          
 100          /* ÉèÖÃ¼Ä´æÆ÷bit¶¨Òå */
 101          enum
 102          {
 103                  MD_NORMAL               = (0 << 6),     /* Õý³£Ä£Ê½ */
 104                  MD_CAL_SELF             = (1 << 6),     /* ×ÔÐ£×¼Ä£Ê½ */
 105                  MD_CAL_ZERO             = (2 << 6),     /* Ð£×¼0¿Ì¶ÈÄ£Ê½ */
 106                  MD_CAL_FULL             = (3 << 6),     /* Ð£×¼Âú¿Ì¶ÈÄ£Ê½ */
 107          
 108                  GAIN_1                  = (0 << 3),     /* ÔöÒæ */
 109                  GAIN_2                  = (1 << 3),     /* ÔöÒæ */
 110                  GAIN_4                  = (2 << 3),     /* ÔöÒæ */
 111                  GAIN_8                  = (3 << 3),     /* ÔöÒæ */
 112                  GAIN_16                 = (4 << 3),     /* ÔöÒæ */
 113                  GAIN_32                 = (5 << 3),     /* ÔöÒæ */
 114                  GAIN_64                 = (6 << 3),     /* ÔöÒæ */
 115                  GAIN_128                = (7 << 3),     /* ÔöÒæ */
 116          
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 3   

 117                  /* ÎÞÂÛË«¼«ÐÔ»¹ÊÇµ¥¼«ÐÔ¶¼²»¸Ä±äÈÎºÎÊäÈëÐÅºÅµÄ×´Ì¬£¬ËüÖ»¸Ä±äÊä³öÊý¾ÝµÄ´úÂëºÍ×ª»»º¯ÊýÉÏµÄÐ£×¼µã */
 118                  BIPOLAR                 = (0 << 2),     /* Ë«¼«ÐÔÊäÈë */
 119                  UNIPOLAR                = (1 << 2),     /* µ¥¼«ÐÔÊäÈë */
 120          
 121                  BUF_NO                  = (0 << 1),     /* ÊäÈëÎÞ»º³å£¨ÄÚ²¿»º³åÆ÷²»ÆôÓÃ) */
 122                  BUF_EN                  = (1 << 1),     /* ÊäÈëÓÐ»º³å (ÆôÓÃÄÚ²¿»º³åÆ÷) */
 123          
 124                  FSYNC_0                 = 0,
 125                  FSYNC_1                 = 1             /* ²»ÆôÓÃ */
 126          };
 127          
 128          /* Ê±ÖÓ¼Ä´æÆ÷bit¶¨Òå */
 129          enum
 130          {
 131                  CLKDIS_0        = 0x00,         /* Ê±ÖÓÊä³öÊ¹ÄÜ £¨µ±Íâ½Ó¾§ÕñÊ±£¬±ØÐëÊ¹ÄÜ²ÅÄÜÕñµ´£© */
 132                  CLKDIS_1        = 0x10,         /* Ê±ÖÓ½ûÖ¹ £¨µ±Íâ²¿Ìá¹©Ê±ÖÓÊ±£¬ÉèÖÃ¸ÃÎ»¿ÉÒÔ½ûÖ¹MCK_OUTÒý½ÅÊä³öÊ±ÖÓÒÔÊ¡µç */
 133          
 134                  /*
 135                          2.4576MHz£¨CLKDIV=0 £©»òÎª 4.9152MHz £¨CLKDIV=1 £©£¬CLK Ó¦ÖÃ ¡°0¡±¡£
 136                          1MHz £¨CLKDIV=0 £©»ò 2MHz   £¨CLKDIV=1 £©£¬CLK ¸ÃÎ»Ó¦ÖÃ  ¡°1¡±
 137                  */
 138                  CLK_4_9152M = 0x08,
 139                  CLK_2_4576M = 0x00,
 140                  CLK_1M          = 0x04,
 141                  CLK_2M          = 0x0C,
 142          
 143                  FS_50HZ         = 0x00,
 144                  FS_60HZ         = 0x01,
 145                  FS_250HZ        = 0x02,
 146                  FS_500HZ        = 0x04,
 147          
 148                  /*
 149                          ËÄÊ®¾Å¡¢µç×Ó³ÓÓ¦ÓÃÖÐÌá¸ßTM7705 ¾«¶ÈµÄ·½·¨
 150                                  µ±Ê¹ÓÃÖ÷Ê±ÖÓÎª 2.4576MHz Ê±£¬Ç¿ÁÒ½¨Òé½«Ê±ÖÓ¼Ä´æÆ÷ÉèÎª 84H,´ËÊ±Êý¾ÝÊä³ö¸üÐÂÂÊÎª10Hz,¼´Ã¿0.1S Êä³öÒ»¸öÐÂÊ
             -ý¾Ý¡£
 151                                  µ±Ê¹ÓÃÖ÷Ê±ÖÓÎª 1MHz Ê±£¬Ç¿ÁÒ½¨Òé½«Ê±ÖÓ¼Ä´æÆ÷ÉèÎª80H, ´ËÊ±Êý¾ÝÊä³ö¸üÐÂÂÊÎª4Hz, ¼´Ã¿0.25S Êä³öÒ»¸öÐÂÊý¾Ý
 152                  */
 153                  ZERO_0          = 0x00,
 154                  ZERO_1          = 0x80
 155          };
 156          
 157          static void TM7705_SyncSPI(void);
 158          static void TM7705_Send8Bit(uint8_t _data);
 159          static uint8_t TM7705_Recive8Bit(void);
 160          static void TM7705_WriteByte(uint8_t _data);
 161          static void TM7705_Write3Byte(uint32_t _data);
 162          static uint8_t TM7705_ReadByte(void);
 163          static uint16_t TM7705_Read2Byte(void);
 164          static uint32_t TM7705_Read3Byte(void);
 165          static void TM7705_WaitDRDY(void);
 166          static void TM7705_ResetHard(void);
 167          static void TM7705_Delay(void);
 168          
 169          /*
 170          *********************************************************************************************************
 171          *       º¯ Êý Ãû: bsp_InitTM7705
 172          *       ¹¦ÄÜËµÃ÷: ÅäÖÃSTM32µÄGPIOºÍSPI½Ó¿Ú£¬ÓÃÓÚÁ¬½Ó TM7705
 173          *       ÐÎ    ²Î: ÎÞ
 174          *       ·µ »Ø Öµ: ÎÞ
 175          *********************************************************************************************************
 176          */
 177          void bsp_InitTM7705(void)
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 4   

 178          {
 179   1      #ifdef SOFT_SPI         /* Èí¼þSPI */
 180   1              /* ÅäÖÃREST¿ÚÏßÎªÍÆÍìÊä³ö£¬È±Ê¡Êä³ö¸ßµçÆ½ */
 181   1      
 182   1              /* ÅäÖÃCS¿ÚÏßÎªÍÆÍìÊä³ö£¬È±Ê¡Êä³ö¸ßµçÆ½ */
 183   1      
 184   1              /* ÅäÖÃSCK¿ÚÏßÎªÍÆÍìÊä³ö£¬È±Ê¡Êä³ö¸ßµçÆ½ */
 185   1      
 186   1              /* ÅäÖÃDIN¿ÚÏßÎªÍÆÍìÊä³ö£¬È±Ê¡Êä³ö¸ßµçÆ½ */
 187   1      
 188   1              /* ÅäÖÃDOUT¿ÚÏßÎªÊäÈë¸¡¿ÕÄ£Ê½ */
 189   1      
 190   1              /* ÅäÖÃDOUT¿ÚÏßÎªÊäÈëÉÏÀ­Ä£Ê½ */
 191   1      #endif
 192   1      
 193   1              bsp_DelayMS(10);
 194   1      
 195   1              TM7705_ResetHard();             /* Ó²¼þ¸´Î» */
 196   1      
 197   1              /*
 198   1                      ÔÚ½Ó¿ÚÐòÁÐ¶ªÊ§µÄÇé¿öÏÂ£¬Èç¹ûÔÚDIN ¸ßµçÆ½µÄÐ´²Ù×÷³ÖÐøÁË×ã¹»³¤µÄÊ±¼ä£¨ÖÁÉÙ 32¸ö´®ÐÐÊ±ÖÓÖÜÆÚ£©£¬
 199   1                      TM7705 ½«»á»Øµ½Ä¬ÈÏ×´Ì¬¡£
 200   1              */
 201   1              bsp_DelayMS(5);
 202   1      
 203   1              TM7705_SyncSPI();               /* Í¬²½SPI½Ó¿ÚÊ±Ðò */
 204   1      
 205   1              bsp_DelayMS(5);
 206   1      
 207   1              /* ÅäÖÃÊ±ÖÓ¼Ä´æÆ÷ */
 208   1              TM7705_WriteByte(REG_CLOCK | WRITE | CH_1);                     /* ÏÈÐ´Í¨ÐÅ¼Ä´æÆ÷£¬ÏÂÒ»²½ÊÇÐ´Ê±ÖÓ¼Ä´æÆ÷ */
 209   1      
 210   1              TM7705_WriteByte(CLKDIS_0 | CLK_4_9152M | FS_50HZ);     /* Ë¢ÐÂËÙÂÊ50Hz */
 211   1              //TM7705_WriteByte(CLKDIS_0 | CLK_4_9152M | FS_500HZ);  /* Ë¢ÐÂËÙÂÊ500Hz */
 212   1      
 213   1              /* Ã¿´ÎÉÏµç½øÐÐÒ»´Î×ÔÐ£×¼ */
 214   1              TM7705_CalibSelf(1);    /* ÄÚ²¿×ÔÐ£×¼ CH1 */
 215   1              bsp_DelayMS(5);
 216   1      }
 217          
 218          /*
 219          *********************************************************************************************************
 220          *       º¯ Êý Ãû: TM7705_Delay
 221          *       ¹¦ÄÜËµÃ÷: CLKÖ®¼äµÄÑÓ³Ù£¬Ê±ÐòÑÓ³Ù. ¶ÔÓÚ51£¬¿ÉÒÔ²»ÑÓ³Ù
 222          *       ÐÎ    ²Î: ÎÞ
 223          *       ·µ »Ø Öµ: ÎÞ
 224          *********************************************************************************************************
 225          */
 226          static void TM7705_Delay(void)
 227          {
 228   1              //uint16_t i;
 229   1      
 230   1              //for (i = 0; i < 5; i++);
 231   1      }
 232          
 233          /*
 234          *********************************************************************************************************
 235          *       º¯ Êý Ãû: TM7705_ResetHard
 236          *       ¹¦ÄÜËµÃ÷: Ó²¼þ¸´Î» TM7705Ð¾Æ¬
 237          *       ÐÎ    ²Î: ÎÞ
 238          *       ·µ »Ø Öµ: ÎÞ
 239          *********************************************************************************************************
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 5   

 240          */
 241          static void TM7705_ResetHard(void)
 242          {
 243   1              RESET_1();
 244   1              bsp_DelayMS(1);
 245   1              RESET_0();
 246   1              bsp_DelayMS(2);
 247   1              RESET_1();
 248   1              bsp_DelayMS(1);
 249   1      }
 250          
 251          /*
 252          *********************************************************************************************************
 253          *       º¯ Êý Ãû: TM7705_SyncSPI
 254          *       ¹¦ÄÜËµÃ÷: Í¬²½TM7705Ð¾Æ¬SPI½Ó¿ÚÊ±Ðò
 255          *       ÐÎ    ²Î: ÎÞ
 256          *       ·µ »Ø Öµ: ÎÞ
 257          *********************************************************************************************************
 258          */
 259          static void TM7705_SyncSPI(void)
 260          {
 261   1              /* AD7705´®ÐÐ½Ó¿ÚÊ§²½ºó½«Æä¸´Î»¡£¸´Î»ºóÒªÑÓÊ±500usÔÙ·ÃÎÊ */
 262   1              CS_0();
 263   1              TM7705_Send8Bit(0xFF);
 264   1              TM7705_Send8Bit(0xFF);
 265   1              TM7705_Send8Bit(0xFF);
 266   1              TM7705_Send8Bit(0xFF);
 267   1              CS_1();
 268   1      }
 269          
 270          /*
 271          *********************************************************************************************************
 272          *       º¯ Êý Ãû: TM7705_Send8Bit
 273          *       ¹¦ÄÜËµÃ÷: ÏòSPI×ÜÏß·¢ËÍ8¸öbitÊý¾Ý¡£ ²»´øCS¿ØÖÆ¡£
 274          *       ÐÎ    ²Î: _data : Êý¾Ý
 275          *       ·µ »Ø Öµ: ÎÞ
 276          *********************************************************************************************************
 277          */
 278          static void TM7705_Send8Bit(uint8_t _data)
 279          {
 280   1              uint8_t i;
 281   1      
 282   1              for(i = 0; i < 8; i++)
 283   1              {
 284   2                      if (_data & 0x80)
 285   2                      {
 286   3                              DI_1();
 287   3                      }
 288   2                      else
 289   2                      {
 290   3                              DI_0();
 291   3                      }
 292   2                      SCK_0();
 293   2                      _data <<= 1;
 294   2                      TM7705_Delay();
 295   2                      SCK_1();
 296   2                      TM7705_Delay();
 297   2              }
 298   1      }
 299          
 300          /*
 301          *********************************************************************************************************
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 6   

 302          *       º¯ Êý Ãû: TM7705_Recive8Bit
 303          *       ¹¦ÄÜËµÃ÷: ´ÓSPI×ÜÏß½ÓÊÕ8¸öbitÊý¾Ý¡£ ²»´øCS¿ØÖÆ¡£
 304          *       ÐÎ    ²Î: ÎÞ
 305          *       ·µ »Ø Öµ: ÎÞ
 306          *********************************************************************************************************
 307          */
 308          static uint8_t TM7705_Recive8Bit(void)
 309          {
 310   1              uint8_t i;
 311   1              uint8_t read = 0;
 312   1      
 313   1              for (i = 0; i < 8; i++)
 314   1              {
 315   2                      SCK_0();
 316   2                      TM7705_Delay();
 317   2                      read = read<<1;
 318   2                      if (DO_IS_HIGH())
 319   2                      {
 320   3                              read++;
 321   3                      }
 322   2                      SCK_1();
 323   2                      TM7705_Delay();
 324   2              }
 325   1              return read;
 326   1      }
 327          
 328          /*
 329          *********************************************************************************************************
 330          *       º¯ Êý Ãû: TM7705_WriteByte
 331          *       ¹¦ÄÜËµÃ÷: Ð´Èë1¸ö×Ö½Ú¡£´øCS¿ØÖÆ
 332          *       ÐÎ    ²Î: _data £º½«ÒªÐ´ÈëµÄÊý¾Ý
 333          *       ·µ »Ø Öµ: ÎÞ
 334          *********************************************************************************************************
 335          */
 336          static void TM7705_WriteByte(uint8_t _data)
 337          {
 338   1              CS_0();
 339   1              TM7705_Send8Bit(_data);
 340   1              CS_1();
 341   1      }
 342          
 343          /*
 344          *********************************************************************************************************
 345          *       º¯ Êý Ãû: TM7705_Write3Byte
 346          *       ¹¦ÄÜËµÃ÷: Ð´Èë3¸ö×Ö½Ú¡£´øCS¿ØÖÆ
 347          *       ÐÎ    ²Î: _data £º½«ÒªÐ´ÈëµÄÊý¾Ý
 348          *       ·µ »Ø Öµ: ÎÞ
 349          *********************************************************************************************************
 350          */
 351          static void TM7705_Write3Byte(uint32_t _data)
 352          {
 353   1              CS_0();
 354   1              TM7705_Send8Bit((_data >> 16) & 0xFF);
 355   1              TM7705_Send8Bit((_data >> 8) & 0xFF);
 356   1              TM7705_Send8Bit(_data);
 357   1              CS_1();
 358   1      }
 359          
 360          /*
 361          *********************************************************************************************************
 362          *       º¯ Êý Ãû: TM7705_ReadByte
 363          *       ¹¦ÄÜËµÃ÷: ´ÓADÐ¾Æ¬¶ÁÈ¡Ò»¸ö×Ö£¨16Î»£©
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 7   

 364          *       ÐÎ    ²Î: ÎÞ
 365          *       ·µ »Ø Öµ: ¶ÁÈ¡µÄ×Ö£¨16Î»£©
 366          *********************************************************************************************************
 367          */
 368          static uint8_t TM7705_ReadByte(void)
 369          {
 370   1              uint8_t read;
 371   1      
 372   1              CS_0();
 373   1              read = TM7705_Recive8Bit();
 374   1              CS_1();
 375   1      
 376   1              return read;
 377   1      }
 378          
 379          /*
 380          *********************************************************************************************************
 381          *       º¯ Êý Ãû: TM7705_Read2Byte
 382          *       ¹¦ÄÜËµÃ÷: ¶Á2×Ö½ÚÊý¾Ý
 383          *       ÐÎ    ²Î: ÎÞ
 384          *       ·µ »Ø Öµ: ¶ÁÈ¡µÄÊý¾Ý£¨16Î»£©
 385          *********************************************************************************************************
 386          */
 387          static uint16_t TM7705_Read2Byte(void)
 388          {
 389   1              uint16_t read;
 390   1      
 391   1              CS_0();
 392   1              read = TM7705_Recive8Bit();
 393   1              read <<= 8;
 394   1              read += TM7705_Recive8Bit();
 395   1              CS_1();
 396   1      
 397   1              return read;
 398   1      }
 399          
 400          /*
 401          *********************************************************************************************************
 402          *       º¯ Êý Ãû: TM7705_Read3Byte
 403          *       ¹¦ÄÜËµÃ÷: ¶Á3×Ö½ÚÊý¾Ý
 404          *       ÐÎ    ²Î: ÎÞ
 405          *       ·µ »Ø Öµ: ¶ÁÈ¡µ½µÄÊý¾Ý£¨24bit) ¸ß8Î»¹Ì¶¨Îª0.
 406          *********************************************************************************************************
 407          */
 408          static uint32_t TM7705_Read3Byte(void)
 409          {
 410   1              uint32_t read;
 411   1      
 412   1              CS_0();
 413   1              read = TM7705_Recive8Bit();
 414   1              read <<= 8;
 415   1              read += TM7705_Recive8Bit();
 416   1              read <<= 8;
 417   1              read += TM7705_Recive8Bit();
 418   1              CS_1();
 419   1              return read;
 420   1      }
 421          
 422          /*
 423          *********************************************************************************************************
 424          *       º¯ Êý Ãû: TM7705_WaitDRDY
 425          *       ¹¦ÄÜËµÃ÷: µÈ´ýÄÚ²¿²Ù×÷Íê³É¡£ ×ÔÐ£×¼Ê±¼ä½Ï³¤£¬ÐèÒªµÈ´ý¡£
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 8   

 426          *       ÐÎ    ²Î: ÎÞ
 427          *       ·µ »Ø Öµ: ÎÞ
 428          *********************************************************************************************************
 429          */
 430          static void TM7705_WaitDRDY(void)
 431          {
 432   1              uint32_t i;
 433   1      
 434   1              for (i = 0; i < 8000; i++)
 435   1              {
 436   2                      if (DRDY_IS_LOW())
 437   2                      {
 438   3                              break;
 439   3                      }
 440   2              }
 441   1              if (i >= 8000)
 442   1              {
 443   2                      printf("TM7705_WaitDRDY() Ð¾Æ¬Ó¦´ð³¬Ê± ...\r\n");               /* µ÷ÊÔÓï¾ä. ÓÃÓïÅÅ´í */
 444   2      
 445   2                      printf("ÖØÐÂÍ¬²½SPI½Ó¿ÚÊ±Ðò\r\n");              /* µ÷ÊÔÓï¾ä. ÓÃÓïÅÅ´í */
 446   2      
 447   2                      TM7705_SyncSPI();               /* Í¬²½SPI½Ó¿ÚÊ±Ðò */
 448   2      
 449   2                      bsp_DelayMS(5);
 450   2              }
 451   1      }
 452          
 453          /*
 454          *********************************************************************************************************
 455          *       º¯ Êý Ãû: TM7705_WriteReg
 456          *       ¹¦ÄÜËµÃ÷: Ð´Ö¸¶¨µÄ¼Ä´æÆ÷
 457          *       ÐÎ    ²Î:  _RegID : ¼Ä´æÆ÷ID
 458          *                         _RegValue : ¼Ä´æÆ÷Öµ¡£ ¶ÔÓÚ8Î»µÄ¼Ä´æÆ÷£¬È¡32Î»ÐÎ²ÎµÄµÍ8bit
 459          *       ·µ »Ø Öµ: ÎÞ
 460          *********************************************************************************************************
 461          */
 462          void TM7705_WriteReg(uint8_t _RegID, uint32_t _RegValue)
 463          {
 464   1              uint8_t bits;
 465   1      
 466   1              switch (_RegID)
 467   1              {
 468   2                      case REG_COMM:          /* Í¨ÐÅ¼Ä´æÆ÷ */
 469   2                      case REG_SETUP:         /* ÉèÖÃ¼Ä´æÆ÷ 8bit */
 470   2                      case REG_CLOCK:         /* Ê±ÖÓ¼Ä´æÆ÷ 8bit */
 471   2                              bits = 8;
 472   2                              break;
 473   2      
 474   2                      case REG_ZERO_CH1:      /* CH1 Æ«ÒÆ¼Ä´æÆ÷ 24bit */
 475   2                      case REG_FULL_CH1:      /* CH1 ÂúÁ¿³Ì¼Ä´æÆ÷ 24bit */
 476   2                      case REG_ZERO_CH2:      /* CH2 Æ«ÒÆ¼Ä´æÆ÷ 24bit */
 477   2                      case REG_FULL_CH2:      /* CH2 ÂúÁ¿³Ì¼Ä´æÆ÷ 24bit*/
 478   2                              bits = 24;
 479   2                              break;
 480   2      
 481   2                      case REG_DATA:          /* Êý¾Ý¼Ä´æÆ÷ 16bit */
 482   2                      default:
 483   2                              return;
 484   2              }
 485   1      
 486   1              TM7705_WriteByte(_RegID | WRITE);       /* Ð´Í¨ÐÅ¼Ä´æÆ÷, Ö¸¶¨ÏÂÒ»²½ÊÇÐ´²Ù×÷£¬²¢Ö¸¶¨Ð´ÄÄ¸ö¼Ä´æÆ÷ */
 487   1      
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 9   

 488   1              if (bits == 8)
 489   1              {
 490   2                      TM7705_WriteByte((uint8_t)_RegValue);
 491   2              }
 492   1              else    /* 24bit */
 493   1              {
 494   2                      TM7705_Write3Byte(_RegValue);
 495   2              }
 496   1      }
 497          
 498          /*
 499          *********************************************************************************************************
 500          *       º¯ Êý Ãû: TM7705_ReadReg
 501          *       ¹¦ÄÜËµÃ÷: Ð´Ö¸¶¨µÄ¼Ä´æÆ÷
 502          *       ÐÎ    ²Î:  _RegID : ¼Ä´æÆ÷ID
 503          *                         _RegValue : ¼Ä´æÆ÷Öµ¡£ ¶ÔÓÚ8Î»µÄ¼Ä´æÆ÷£¬È¡32Î»ÐÎ²ÎµÄµÍ8bit
 504          *       ·µ »Ø Öµ: ¶Áµ½µÄ¼Ä´æÆ÷Öµ¡£ ¶ÔÓÚ8Î»µÄ¼Ä´æÆ÷£¬È¡32Î»ÐÎ²ÎµÄµÍ8bit
 505          *********************************************************************************************************
 506          */
 507          uint32_t TM7705_ReadReg(uint8_t _RegID)
 508          {
 509   1              uint8_t bits;
 510   1              uint32_t read;
 511   1      
 512   1              switch (_RegID)
 513   1              {
 514   2                      case REG_COMM:          /* Í¨ÐÅ¼Ä´æÆ÷ */
 515   2                      case REG_SETUP:         /* ÉèÖÃ¼Ä´æÆ÷ 8bit */
 516   2                      case REG_CLOCK:         /* Ê±ÖÓ¼Ä´æÆ÷ 8bit */
 517   2                              bits = 8;
 518   2                              break;
 519   2      
 520   2                      case REG_ZERO_CH1:      /* CH1 Æ«ÒÆ¼Ä´æÆ÷ 24bit */
 521   2                      case REG_FULL_CH1:      /* CH1 ÂúÁ¿³Ì¼Ä´æÆ÷ 24bit */
 522   2                      case REG_ZERO_CH2:      /* CH2 Æ«ÒÆ¼Ä´æÆ÷ 24bit */
 523   2                      case REG_FULL_CH2:      /* CH2 ÂúÁ¿³Ì¼Ä´æÆ÷ 24bit*/
 524   2                              bits = 24;
 525   2                              break;
 526   2      
 527   2                      case REG_DATA:          /* Êý¾Ý¼Ä´æÆ÷ 16bit */
 528   2                      default:
 529   2                              return 0xFFFFFFFF;
 530   2              }
 531   1      
 532   1              TM7705_WriteByte(_RegID | READ);        /* Ð´Í¨ÐÅ¼Ä´æÆ÷, Ö¸¶¨ÏÂÒ»²½ÊÇÐ´²Ù×÷£¬²¢Ö¸¶¨Ð´ÄÄ¸ö¼Ä´æÆ÷ */
 533   1      
 534   1              if (bits == 16)
 535   1              {
 536   2                      read = TM7705_Read2Byte();
 537   2              }
 538   1              else if (bits == 8)
 539   1              {
 540   2                      read = TM7705_ReadByte();
 541   2              }
 542   1              else    /* 24bit */
 543   1              {
 544   2                      read = TM7705_Read3Byte();
 545   2              }
 546   1              return read;
 547   1      }
 548          
 549          /*
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 10  

 550          *********************************************************************************************************
 551          *       º¯ Êý Ãû: TM7705_CalibSelf
 552          *       ¹¦ÄÜËµÃ÷: Æô¶¯×ÔÐ£×¼. ÄÚ²¿×Ô¶¯¶Ì½ÓAIN+ AIN-Ð£×¼0Î»£¬ÄÚ²¿¶Ì½Óµ½Vref Ð£×¼ÂúÎ»¡£´Ëº¯ÊýÖ´ÐÐ¹ý³Ì½Ï³¤£¬
 553          *                         Êµ²âÔ¼ 180ms
 554          *       ÐÎ    ²Î:  _ch : ADCÍ¨µÀ£¬1»ò2
 555          *       ·µ »Ø Öµ: ÎÞ
 556          *********************************************************************************************************
 557          */
 558          void TM7705_CalibSelf(uint8_t _ch)
 559          {
 560   1              if (_ch == 1)
 561   1              {
 562   2                      /* ×ÔÐ£×¼CH1 */
 563   2                      TM7705_WriteByte(REG_SETUP | WRITE | CH_1);     /* Ð´Í¨ÐÅ¼Ä´æÆ÷£¬ÏÂÒ»²½ÊÇÐ´ÉèÖÃ¼Ä´æÆ÷£¬Í¨µÀ1 */
 564   2                      TM7705_WriteByte(MD_CAL_SELF | __CH1_GAIN_BIPOLAR_BUF | FSYNC_0);/* Æô¶¯×ÔÐ£×¼ */
 565   2                      TM7705_WaitDRDY();      /* µÈ´ýÄÚ²¿²Ù×÷Íê³É --- Ê±¼ä½Ï³¤£¬Ô¼180ms */
 566   2              }
 567   1              else if (_ch == 2)
 568   1              {
 569   2                      /* ×ÔÐ£×¼CH2 */
 570   2                      TM7705_WriteByte(REG_SETUP | WRITE | CH_2);     /* Ð´Í¨ÐÅ¼Ä´æÆ÷£¬ÏÂÒ»²½ÊÇÐ´ÉèÖÃ¼Ä´æÆ÷£¬Í¨µÀ2 */
 571   2                      TM7705_WriteByte(MD_CAL_SELF | __CH2_GAIN_BIPOLAR_BUF | FSYNC_0);       /* Æô¶¯×ÔÐ£×¼ */
 572   2                      TM7705_WaitDRDY();      /* µÈ´ýÄÚ²¿²Ù×÷Íê³É  --- Ê±¼ä½Ï³¤£¬Ô¼180ms */
 573   2              }
 574   1      }
 575          
 576          /*
 577          *********************************************************************************************************
 578          *       º¯ Êý Ãû: TM7705_SytemCalibZero
 579          *       ¹¦ÄÜËµÃ÷: Æô¶¯ÏµÍ³Ð£×¼ÁãÎ». Çë½«AIN+ AIN-¶Ì½Óºó£¬Ö´ÐÐ¸Ãº¯Êý¡£Ð£×¼Ó¦¸ÃÓÉÖ÷³ÌÐò¿ØÖÆ²¢±£´æÐ£×¼²ÎÊý¡£
 580          *                        Ö´ÐÐÍê±Ïºó¡£¿ÉÒÔÍ¨¹ý TM7705_ReadReg(REG_ZERO_CH1) ºÍ  TM7705_ReadReg(REG_ZERO_CH2) ¶ÁÈ¡Ð£×¼²ÎÊý¡£
 581          *       ÐÎ    ²Î: _ch : ADCÍ¨µÀ£¬1»ò2
 582          *       ·µ »Ø Öµ: ÎÞ
 583          *********************************************************************************************************
 584          */
 585          void TM7705_SytemCalibZero(uint8_t _ch)
 586          {
 587   1              if (_ch == 1)
 588   1              {
 589   2                      /* Ð£×¼CH1 */
 590   2                      TM7705_WriteByte(REG_SETUP | WRITE | CH_1);     /* Ð´Í¨ÐÅ¼Ä´æÆ÷£¬ÏÂÒ»²½ÊÇÐ´ÉèÖÃ¼Ä´æÆ÷£¬Í¨µÀ1 */
 591   2                      TM7705_WriteByte(MD_CAL_ZERO | __CH1_GAIN_BIPOLAR_BUF | FSYNC_0);/* Æô¶¯×ÔÐ£×¼ */
 592   2                      TM7705_WaitDRDY();      /* µÈ´ýÄÚ²¿²Ù×÷Íê³É */
 593   2              }
 594   1              else if (_ch == 2)
 595   1              {
 596   2                      /* Ð£×¼CH2 */
 597   2                      TM7705_WriteByte(REG_SETUP | WRITE | CH_2);     /* Ð´Í¨ÐÅ¼Ä´æÆ÷£¬ÏÂÒ»²½ÊÇÐ´ÉèÖÃ¼Ä´æÆ÷£¬Í¨µÀ1 */
 598   2                      TM7705_WriteByte(MD_CAL_ZERO | __CH2_GAIN_BIPOLAR_BUF | FSYNC_0);       /* Æô¶¯×ÔÐ£×¼ */
 599   2                      TM7705_WaitDRDY();      /* µÈ´ýÄÚ²¿²Ù×÷Íê³É */
 600   2              }
 601   1      }
 602          
 603          /*
 604          *********************************************************************************************************
 605          *       º¯ Êý Ãû: TM7705_SytemCalibFull
 606          *       ¹¦ÄÜËµÃ÷: Æô¶¯ÏµÍ³Ð£×¼ÂúÎ». Çë½«AIN+ AIN-½Ó×î´óÊäÈëµçÑ¹Ô´£¬Ö´ÐÐ¸Ãº¯Êý¡£Ð£×¼Ó¦¸ÃÓÉÖ÷³ÌÐò¿ØÖÆ²¢±£´æÐ£×¼²ÎÊ
             -ý¡£
 607          *                        Ö´ÐÐÍê±Ïºó¡£¿ÉÒÔÍ¨¹ý TM7705_ReadReg(REG_FULL_CH1) ºÍ  TM7705_ReadReg(REG_FULL_CH2) ¶ÁÈ¡Ð£×¼²ÎÊý¡£
 608          *       ÐÎ    ²Î:  _ch : ADCÍ¨µÀ£¬1»ò2
 609          *       ·µ »Ø Öµ: ÎÞ
 610          *********************************************************************************************************
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 11  

 611          */
 612          void TM7705_SytemCalibFull(uint8_t _ch)
 613          {
 614   1              if (_ch == 1)
 615   1              {
 616   2                      /* Ð£×¼CH1 */
 617   2                      TM7705_WriteByte(REG_SETUP | WRITE | CH_1);     /* Ð´Í¨ÐÅ¼Ä´æÆ÷£¬ÏÂÒ»²½ÊÇÐ´ÉèÖÃ¼Ä´æÆ÷£¬Í¨µÀ1 */
 618   2                      TM7705_WriteByte(MD_CAL_FULL | __CH1_GAIN_BIPOLAR_BUF | FSYNC_0);/* Æô¶¯×ÔÐ£×¼ */
 619   2                      TM7705_WaitDRDY();      /* µÈ´ýÄÚ²¿²Ù×÷Íê³É */
 620   2              }
 621   1              else if (_ch == 2)
 622   1              {
 623   2                      /* Ð£×¼CH2 */
 624   2                      TM7705_WriteByte(REG_SETUP | WRITE | CH_2);     /* Ð´Í¨ÐÅ¼Ä´æÆ÷£¬ÏÂÒ»²½ÊÇÐ´ÉèÖÃ¼Ä´æÆ÷£¬Í¨µÀ1 */
 625   2                      TM7705_WriteByte(MD_CAL_FULL | __CH2_GAIN_BIPOLAR_BUF | FSYNC_0);       /* Æô¶¯×ÔÐ£×¼ */
 626   2                      TM7705_WaitDRDY();      /* µÈ´ýÄÚ²¿²Ù×÷Íê³É */
 627   2              }
 628   1      }
 629          
 630          /*
 631          *********************************************************************************************************
 632          *       º¯ Êý Ãû: TM7705_ReadAdc1
 633          *       ¹¦ÄÜËµÃ÷: ¶ÁÍ¨µÀ1»ò2µÄADCÊý¾Ý
 634          *       ÐÎ    ²Î: ÎÞ
 635          *       ·µ »Ø Öµ: ÎÞ
 636          *********************************************************************************************************
 637          */
 638          uint16_t TM7705_ReadAdc(uint8_t _ch)
 639          {
 640   1              uint8_t i;
 641   1              uint16_t read = 0;
 642   1      
 643   1              /* ÎªÁË±ÜÃâÍ¨µÀÇÐ»»Ôì³É¶ÁÊýÊ§Ð§£¬¶Á2´Î */
 644   1              for (i = 0; i < 2; i++)
 645   1              {
 646   2                      TM7705_WaitDRDY();              /* µÈ´ýDRDY¿ÚÏßÎª0 */
 647   2      
 648   2                      if (_ch == 1)
 649   2                      {
 650   3                              TM7705_WriteByte(0x38);
 651   3                      }
 652   2                      else if (_ch == 2)
 653   2                      {
 654   3                              TM7705_WriteByte(0x39);
 655   3                      }
 656   2      
 657   2                      read = TM7705_Read2Byte();
 658   2              }
 659   1              return read;
 660   1      }
 661          
 662          /***************************** °²¸»À³µç×Ó www.armfly.com (END OF FILE) *********************************/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    838    ----
   CONSTANT SIZE    =     59    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----      31
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.57.0.0   BSP_TM7705                                                        07/17/2020 15:34:54 PAGE 12  

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
